{"version":3,"sources":["components/Explorer.js","hooks/use-traverse-tree.js","json-data/JSON-Data.js","App.js","index.js"],"names":["Explorer","insertNodeHandler","docs","updateNodeHandler","deleteNodeHandler","useState","folderOpen","setFolderOpen","expand","setExpand","showEditTools","setShowEditTools","showRename","setShowRename","visible","isFolder","showInputBox","setShowInputBox","newFileFolderHandler","e","stopPropagation","renameFileFolder","target","value","trim","keyCode","id","deleteFileFolderHandler","style","marginLeft","className","onClick","nodeName","onMouseEnter","onMouseLeave","onKeyDown","autoFocus","type","defaultValue","name","onBlur","marginRight","addFileFolder","display","items","map","doc","fontSize","useTraverseTree","insertNode","tree","folderId","itemName","unshift","Date","getTime","latestNode","ob","updateNode","deleteNode","filter","explorer","App","setDocs","margin","padding","width","height","border","borderRadius","color","updatedTree","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.d9b3ba06.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction Explorer({\n  insertNodeHandler,\n  docs,\n  updateNodeHandler,\n  deleteNodeHandler\n}) {\n  const [folderOpen, setFolderOpen] = useState(false);\n  const [expand, setExpand] = useState(false);\n  const [showEditTools, setShowEditTools] = useState(false);\n  const [showRename, setShowRename] = useState(false);\n  const [showInputBox, setShowInputBox] = useState({\n    visible: false,\n    isFolder: null\n  });\n\n  const toggleFolderIconHandler = (e) => {\n    if (e.target.nodeName === \"SECTION\" || e.target.nodeName === \"ARTICLE\") {\n      setExpand(!expand);\n      setFolderOpen(!folderOpen);\n    }\n  };\n\n  const newFileFolderHandler = (e, isFolder) => {\n    e.stopPropagation();\n    setExpand(true);\n    setShowInputBox({ visible: true, isFolder });\n  };\n\n  const addFileFolder = (e) => {\n    if (e.target.value.trim() && e.keyCode === 13) {\n      setShowInputBox({ ...showInputBox, visible: false });\n      insertNodeHandler(docs.id, e.target.value.trim(), showInputBox.isFolder);\n    }\n  };\n\n  const renameFileFolder = (e) => {\n    if (e.target.value.trim() && e.keyCode === 13) {\n      setShowRename(false);\n      updateNodeHandler(docs.id, e.target.value.trim());\n    }\n  };\n\n  const deleteFileFolderHandler = () => {\n    deleteNodeHandler(docs.id);\n  };\n\n  if (docs.isFolder) {\n    return (\n      <div style={{ marginLeft: \"1rem\" }}>\n        <section\n          className=\"folder\"\n          onClick={toggleFolderIconHandler}\n          onMouseEnter={() => {\n            setShowEditTools(!showEditTools);\n          }}\n          onMouseLeave={(e) => {\n            setShowEditTools(!showEditTools);\n          }}\n        >\n          <>\n            <article className=\"not__selectable\">\n              <div>{folderOpen ? \"📂\" : \"📁\"}</div>\n              {showRename && (\n                <input\n                  onKeyDown={(e) => renameFileFolder(e)}\n                  autoFocus\n                  className=\"input__newFileFolder\"\n                  type=\"text\"\n                  defaultValue={docs.name}\n                  onBlur={() => {\n                    setShowRename(false);\n                  }}\n                ></input>\n              )}\n              {!showRename && docs.name}\n            </article>\n            {showEditTools && (\n              <figure style={{ marginRight: 0 }} className=\"not__selectable\">\n                <button\n                  className=\"btn_styles\"\n                  onClick={(e) => setShowRename(true)}\n                >\n                  ✏️\n                </button>\n                <button\n                  onClick={(e) => newFileFolderHandler(e, false)}\n                  className=\"btn_styles\"\n                >\n                  📄\n                </button>\n                <button\n                  onClick={(e) => newFileFolderHandler(e, true)}\n                  className=\"btn_styles\"\n                >\n                  🗂\n                </button>\n                <button\n                  onClick={(e) => deleteFileFolderHandler(e)}\n                  className=\"btn_styles\"\n                >\n                  ❌\n                </button>\n              </figure>\n            )}\n          </>\n        </section>\n        {showInputBox.visible && (\n          <div className=\"inputbox__styles\">\n            <span>{showInputBox.isFolder ? \"📁\" : \"📄\"}</span>\n            <input\n              onKeyDown={(e) => addFileFolder(e)}\n              autoFocus\n              className=\"input__newFileFolder\"\n              type=\"text\"\n              onBlur={() => {\n                setShowInputBox({ ...showInputBox, visible: false });\n              }}\n            ></input>\n          </div>\n        )}\n        <div style={{ display: expand ? \"block\" : \"none\" }}>\n          {docs.items.map((doc) => (\n            <Explorer\n              updateNodeHandler={updateNodeHandler}\n              insertNodeHandler={insertNodeHandler}\n              deleteNodeHandler={deleteNodeHandler}\n              docs={doc}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  } else if (!docs.isFolder) {\n    return (\n      <div style={{ marginLeft: \"2rem\" }}>\n        <section\n          className=\"folder\"\n          onMouseEnter={(e) => {\n            setShowEditTools(!showEditTools);\n          }}\n          onMouseLeave={(e) => {\n            setShowEditTools(!showEditTools);\n          }}\n        >\n          <article style={{ fontSize: \"1rem\" }} className=\"not__selectable\">\n            <div>📄 </div>\n            {showRename && (\n              <input\n                onKeyDown={(e) => renameFileFolder(e)}\n                autoFocus\n                className=\"input__newFileFolder\"\n                type=\"text\"\n                defaultValue={docs.name}\n                onBlur={() => {\n                  setShowRename(false);\n                }}\n              ></input>\n            )}\n            {!showRename && docs.name}\n          </article>\n          {showEditTools && (\n            <figure style={{ marginRight: 0 }} className=\"not__selectable\">\n              <button\n                onClick={(e) => setShowRename(true)}\n                className=\"btn_styles\"\n              >\n                ✏️\n              </button>\n              <button\n                onClick={(e) => deleteFileFolderHandler(e)}\n                className=\"btn_styles\"\n              >\n                ❌\n              </button>\n            </figure>\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Explorer;\n","const useTraverseTree = () => {\n  function insertNode(tree, folderId, itemName, isFolder) {\n    if (tree.id === folderId && tree.isFolder) {\n      tree.items.unshift({\n        id: new Date().getTime(),\n        name: itemName,\n        isFolder,\n        items: [],\n      });\n      return tree;\n    }\n    let latestNode = [];\n    latestNode = tree.items.map((ob) => {\n      return insertNode(ob, folderId, itemName, isFolder);\n    });\n\n    return { ...tree, items: latestNode };\n  }\n\n  function updateNode(tree, folderId, itemName) {\n    if (tree.id === folderId) {\n      tree.name = itemName;\n      return tree;\n    }\n    let latestNode = [];\n    latestNode = tree.items.map((ob) => {\n      return updateNode(ob, folderId, itemName);\n    });\n\n    return { ...tree, items: latestNode };\n  }\n\n  function deleteNode(tree, folderId) {\n    if(tree.id === folderId){\n      delete tree.name;\n      delete tree.items;\n      delete tree.isFolder;\n      return tree;\n    }\n\n\n    let latestNode = [];\n    let filteredNodes = tree.items.filter((ob) => ob.id !== folderId);\n    latestNode = filteredNodes.map(ob => deleteNode(ob, folderId));\n\n    return { ...tree, items: latestNode };\n  }\n\n  return { insertNode, updateNode,  deleteNode };\n};\n\nexport default useTraverseTree;\n","const explorer = {\n  id: \"1\",\n  name: \"Files\",\n  isFolder: true,\n  items: [\n    {\n      id: \"2\",\n      name: \"public\",\n      isFolder: true,\n      items: [\n        {\n          id: \"3\",\n          name: \"index.html\",\n          isFolder: false,\n          items: []\n        }\n      ]\n    },\n    {\n      id: \"4\",\n      name: \"src\",\n      isFolder: true,\n      items: [\n        {\n          id: \"5\",\n          name: \"data\",\n          isFolder: true,\n          items: [\n            {\n              id: \"6\",\n              name: \"json.js\",\n              isFolder: false,\n              items: []\n            }\n          ]\n        },\n        {\n          id: \"7\",\n          name: \"App.js\",\n          isFolder: false,\n          items: []\n        },\n        {\n          id: \"8\",\n          name: \"styles.css\",\n          isFolder: false,\n          items: []\n        }\n      ]\n    },\n    {\n      id: \"9\",\n      name: \"package.json\",\n      isFolder: false,\n      items: []\n    }\n  ]\n};\n\nexport default explorer;\n","import { useState } from \"react\";\nimport Explorer from \"./components/Explorer\";\nimport useTraverseTree from \"./hooks/use-traverse-tree\";\nimport explorer from \"./json-data/JSON-Data\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [docs, setDocs] = useState(explorer);\n\n  const { insertNode, updateNode, deleteNode } = useTraverseTree();\n\n  const insertNodeHandler = (folderId, itemName, isFolder) => {\n    const updatedTree = insertNode(docs, folderId, itemName, isFolder);\n    setDocs(updatedTree);\n  };\n\n  const updateNodeHandler = (folderId, itemName) => {\n    const updatedTree = updateNode(docs, folderId, itemName);\n    setDocs(updatedTree);\n  };\n\n  const deleteNodeHandler = (folderId) => {\n    const updatedTree = deleteNode(docs, folderId);\n    setDocs(updatedTree);\n  };\n\n  return (\n    <div\n      className=\"App not__selectable\"\n      style={{\n        margin: \"0 1vw\",\n        padding: \"0rem 0 1rem 0\",\n        width: \"94vw\",\n        height: \"fit-content\",\n        border: \"1px solid darkgrey\",\n        borderRadius: \"0.25rem\",\n        color: \"darkgray\"\n      }}\n    >\n      <h4 style={{ margin: \"1rem 0 1rem 1.5rem\" }}>\n        CodeSandbox: Sidebar File Explorer\n      </h4>\n      <Explorer\n        updateNodeHandler={updateNodeHandler}\n        insertNodeHandler={insertNodeHandler}\n        deleteNodeHandler={deleteNodeHandler}\n        docs={docs}\n      />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}